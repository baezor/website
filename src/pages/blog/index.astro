---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "@/const";

// Get all blog posts and sort by publication date
const posts = await getCollection("blog");
const sortedPosts = posts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<Layout title={`Blog | ${SITE_TITLE}`} description={SITE_DESCRIPTION}>
  <main class="blog-container">
    <h1>Blog</h1>
    <p class="description">Latest articles and updates</p>

    <section class="blog-posts">
      {
        sortedPosts.map((post) => (
          <article class="post-card">
            {post.data.heroImage && (
              <div class="post-image">
                <a href={`/blog/${post.slug}/`}>
                  <img src={post.data.heroImage} alt={post.data.title} />
                </a>
              </div>
            )}
            <div class="post-content">
              <time datetime={post.data.pubDate.toISOString()}>
                {post.data.pubDate.toLocaleDateString("en-us", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                })}
              </time>
              <h2 class="post-title">
                <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
              </h2>
              <p class="post-description">{post.data.description}</p>
              <a href={`/blog/${post.slug}/`} class="read-more">
                Read more â†’
              </a>
            </div>
          </article>
        ))
      }
    </section>
  </main>
</Layout>

<style>
  .blog-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 6rem 1rem 4rem 1rem;
  }

  h1 {
    margin-bottom: 0.5rem;
  }

  .description {
    color: var(--text-secondary);
    margin-bottom: 3rem;
  }

  .blog-posts {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .post-card {
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease-in-out;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .post-card:hover {
    transform: translateY(-4px);
  }

  .post-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .post-content {
    padding: 1.5rem 0;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  time {
    font-size: 0.85rem;
    color: var(--text-secondary);
  }

  .post-title {
    margin: 0.5rem 0;
    font-size: 1.5rem;
  }

  .post-title a {
    color: inherit;
    text-decoration: none;
  }

  .post-title a:hover {
    text-decoration: underline;
  }

  .post-description {
    margin: 0.5rem 0 1.5rem;
    flex-grow: 1;
  }

  .read-more {
    display: inline-block;
    color: var(--accent);
    text-decoration: none;
    font-weight: 500;
    align-self: flex-start;
  }

  .read-more:hover {
    text-decoration: underline;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .blog-posts {
      grid-template-columns: 1fr;
    }
  }
</style>
